// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Hpc.Rest
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HPCPackRestClient.
    /// </summary>
    public static partial class HPCPackRestClientExtensions
    {
            /// <summary>
            /// Get HPC Pack Version
            /// </summary>
            /// <remarks>
            /// Get the version of Microsoft HPC Pack installed on the HPC cluster that
            /// hosts the web service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static string GetClusterVersion(this IHPCPackRestClient operations, string xMsAsUser = default(string))
            {
                return operations.GetClusterVersionAsync(xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get HPC Pack Version
            /// </summary>
            /// <remarks>
            /// Get the version of Microsoft HPC Pack installed on the HPC cluster that
            /// hosts the web service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetClusterVersionAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterVersionWithHttpMessagesAsync(xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Active Head Node Name
            /// </summary>
            /// <remarks>
            /// Get the name of the active head node of the HPC Pack cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static string GetClusterActiveHeadNode(this IHPCPackRestClient operations, string xMsAsUser = default(string))
            {
                return operations.GetClusterActiveHeadNodeAsync(xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Active Head Node Name
            /// </summary>
            /// <remarks>
            /// Get the name of the active head node of the HPC Pack cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetClusterActiveHeadNodeAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterActiveHeadNodeWithHttpMessagesAsync(xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get DateTime Format
            /// </summary>
            /// <remarks>
            /// Get DateTime format for the DateTime objects returned in the API
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static string GetClusterDateTimeFormat(this IHPCPackRestClient operations, string xMsAsUser = default(string))
            {
                return operations.GetClusterDateTimeFormatAsync(xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get DateTime Format
            /// </summary>
            /// <remarks>
            /// Get DateTime format for the DateTime objects returned in the API
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetClusterDateTimeFormatAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterDateTimeFormatWithHttpMessagesAsync(xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Cluster User Roles
            /// </summary>
            /// <remarks>
            /// Get the roles of the cluster user who makes the API call.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<string> GetUserRoles(this IHPCPackRestClient operations, string xMsAsUser = default(string))
            {
                return operations.GetUserRolesAsync(xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Cluster User Roles
            /// </summary>
            /// <remarks>
            /// Get the roles of the cluster user who makes the API call.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetUserRolesAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserRolesWithHttpMessagesAsync(xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get cluster metric definitions
            /// </summary>
            /// <remarks>
            /// Get cluster metric definitions. You can then get the history of a metric.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<MetricDefinition> GetClusterMetricDefintions(this IHPCPackRestClient operations, string xMsAsUser = default(string))
            {
                return operations.GetClusterMetricDefintionsAsync(xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get cluster metric definitions
            /// </summary>
            /// <remarks>
            /// Get cluster metric definitions. You can then get the history of a metric.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MetricDefinition>> GetClusterMetricDefintionsAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterMetricDefintionsWithHttpMessagesAsync(xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get cluster metric history
            /// </summary>
            /// <remarks>
            /// Get cluster metric history
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Metric name
            /// </param>
            /// <param name='fromTime'>
            /// The start time in UTC
            /// </param>
            /// <param name='toTime'>
            /// The end time in UTC
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static MetricData GetClusterMetricHistory(this IHPCPackRestClient operations, string name, System.DateTime fromTime, System.DateTime toTime, string xMsAsUser = default(string))
            {
                return operations.GetClusterMetricHistoryAsync(name, fromTime, toTime, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get cluster metric history
            /// </summary>
            /// <remarks>
            /// Get cluster metric history
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Metric name
            /// </param>
            /// <param name='fromTime'>
            /// The start time in UTC
            /// </param>
            /// <param name='toTime'>
            /// The end time in UTC
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricData> GetClusterMetricHistoryAsync(this IHPCPackRestClient operations, string name, System.DateTime fromTime, System.DateTime toTime, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterMetricHistoryWithHttpMessagesAsync(name, fromTime, toTime, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Cluster Job Metrics
            /// </summary>
            /// <remarks>
            /// Get cluster job metrics for the last 7 days.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static MetricData GetClusterJobMetrics(this IHPCPackRestClient operations, string xMsAsUser = default(string))
            {
                return operations.GetClusterJobMetricsAsync(xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Cluster Job Metrics
            /// </summary>
            /// <remarks>
            /// Get cluster job metrics for the last 7 days.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricData> GetClusterJobMetricsAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterJobMetricsWithHttpMessagesAsync(xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Cluster Nodes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='names'>
            /// A comma-separated list of node names.
            /// </param>
            /// <param name='jobs'>
            /// A comma-separated list of job ids.
            /// </param>
            /// <param name='group'>
            /// A node group name.
            /// </param>
            /// <param name='state'>
            /// Node state. Possible values include: 'Unknown', 'Provisioning', 'Offline',
            /// 'Starting', 'Online', 'Draining', 'Rejected', 'Removing', 'NotDeployed',
            /// 'Stopping'
            /// </param>
            /// <param name='health'>
            /// Node health. Possible values include: 'OK', 'Warning', 'Error',
            /// 'Transitional', 'Unapproved'
            /// </param>
            public static IList<Node> GetClusterNodes(this IHPCPackRestClient operations, string xMsAsUser = default(string), string names = default(string), string jobs = default(string), string group = default(string), string state = default(string), string health = default(string))
            {
                return operations.GetClusterNodesAsync(xMsAsUser, names, jobs, group, state, health).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Cluster Nodes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='names'>
            /// A comma-separated list of node names.
            /// </param>
            /// <param name='jobs'>
            /// A comma-separated list of job ids.
            /// </param>
            /// <param name='group'>
            /// A node group name.
            /// </param>
            /// <param name='state'>
            /// Node state. Possible values include: 'Unknown', 'Provisioning', 'Offline',
            /// 'Starting', 'Online', 'Draining', 'Rejected', 'Removing', 'NotDeployed',
            /// 'Stopping'
            /// </param>
            /// <param name='health'>
            /// Node health. Possible values include: 'OK', 'Warning', 'Error',
            /// 'Transitional', 'Unapproved'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Node>> GetClusterNodesAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), string names = default(string), string jobs = default(string), string group = default(string), string state = default(string), string health = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterNodesWithHttpMessagesAsync(xMsAsUser, names, jobs, group, state, health, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Cluster Node by Name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node name
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static Node GetClusterNode(this IHPCPackRestClient operations, string name, string xMsAsUser = default(string))
            {
                return operations.GetClusterNodeAsync(name, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Cluster Node by Name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node name
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Node> GetClusterNodeAsync(this IHPCPackRestClient operations, string name, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterNodeWithHttpMessagesAsync(name, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Operate a Cluster Node
            /// </summary>
            /// <remarks>
            /// The requested operation will be performed asynchronously. The API doesn't
            /// ensure it's successfully on return. The caller has to query the node state
            /// for the operation result.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node name
            /// </param>
            /// <param name='operation'>
            /// Possible values include: 'start', 'stop', 'reboot', 'shutdown',
            /// 'bringOnline', 'takeOffline'
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void OperateClusterNode(this IHPCPackRestClient operations, string name, string operation, string xMsAsUser = default(string))
            {
                operations.OperateClusterNodeAsync(name, operation, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Operate a Cluster Node
            /// </summary>
            /// <remarks>
            /// The requested operation will be performed asynchronously. The API doesn't
            /// ensure it's successfully on return. The caller has to query the node state
            /// for the operation result.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node name
            /// </param>
            /// <param name='operation'>
            /// Possible values include: 'start', 'stop', 'reboot', 'shutdown',
            /// 'bringOnline', 'takeOffline'
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task OperateClusterNodeAsync(this IHPCPackRestClient operations, string name, string operation, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.OperateClusterNodeWithHttpMessagesAsync(name, operation, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Node Metrics
            /// </summary>
            /// <remarks>
            /// Get metrics of nodes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='metricNames'>
            /// A comma separated names of metrics, available names are HPCCpuUsage,
            /// HPCMemoryPaging, HPCDiskThroughput, HPCNetwork and HPCCoresInUse
            /// </param>
            public static IList<NodeMetric> GetClusterNodeMetrics(this IHPCPackRestClient operations, string metricNames)
            {
                return operations.GetClusterNodeMetricsAsync(metricNames).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Node Metrics
            /// </summary>
            /// <remarks>
            /// Get metrics of nodes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='metricNames'>
            /// A comma separated names of metrics, available names are HPCCpuUsage,
            /// HPCMemoryPaging, HPCDiskThroughput, HPCNetwork and HPCCoresInUse
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NodeMetric>> GetClusterNodeMetricsAsync(this IHPCPackRestClient operations, string metricNames, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterNodeMetricsWithHttpMessagesAsync(metricNames, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Cluster Node Stat of State
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<NodeStatOfStateItem> GetClusterNodeStatOfState(this IHPCPackRestClient operations, string xMsAsUser = default(string))
            {
                return operations.GetClusterNodeStatOfStateAsync(xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Cluster Node Stat of State
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NodeStatOfStateItem>> GetClusterNodeStatOfStateAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterNodeStatOfStateWithHttpMessagesAsync(xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Cluster Node Stat of Health
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<NodeStatOfHealthItem> GetClusterNodeStatOfHealth(this IHPCPackRestClient operations, string xMsAsUser = default(string))
            {
                return operations.GetClusterNodeStatOfHealthAsync(xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Cluster Node Stat of Health
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NodeStatOfHealthItem>> GetClusterNodeStatOfHealthAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterNodeStatOfHealthWithHttpMessagesAsync(xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Cluster Operation Logs
            /// </summary>
            /// <remarks>
            /// Get cluster operation logs in time order, with the latest log being first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='fromTime'>
            /// The start time(exclusive) in UTC
            /// </param>
            /// <param name='toTime'>
            /// The end time(exclusive) in UTC
            /// </param>
            /// <param name='limit'>
            /// The max number of logs to return
            /// </param>
            /// <param name='nodeNames'>
            /// A comma-separated list of names for which the logs will be retrieved.
            /// </param>
            /// <param name='withDetail'>
            /// Whether to include the "Entries" property for each log. By deafult no
            /// "Entries" will be returned.
            /// </param>
            public static IList<OperationLog> GetClusterOperations(this IHPCPackRestClient operations, string xMsAsUser = default(string), System.DateTime? fromTime = default(System.DateTime?), System.DateTime? toTime = default(System.DateTime?), double? limit = default(double?), string nodeNames = default(string), bool? withDetail = false)
            {
                return operations.GetClusterOperationsAsync(xMsAsUser, fromTime, toTime, limit, nodeNames, withDetail).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Cluster Operation Logs
            /// </summary>
            /// <remarks>
            /// Get cluster operation logs in time order, with the latest log being first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='fromTime'>
            /// The start time(exclusive) in UTC
            /// </param>
            /// <param name='toTime'>
            /// The end time(exclusive) in UTC
            /// </param>
            /// <param name='limit'>
            /// The max number of logs to return
            /// </param>
            /// <param name='nodeNames'>
            /// A comma-separated list of names for which the logs will be retrieved.
            /// </param>
            /// <param name='withDetail'>
            /// Whether to include the "Entries" property for each log. By deafult no
            /// "Entries" will be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OperationLog>> GetClusterOperationsAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), System.DateTime? fromTime = default(System.DateTime?), System.DateTime? toTime = default(System.DateTime?), double? limit = default(double?), string nodeNames = default(string), bool? withDetail = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterOperationsWithHttpMessagesAsync(xMsAsUser, fromTime, toTime, limit, nodeNames, withDetail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the First Cluster Operation Log in Time Order
            /// </summary>
            /// <remarks>
            /// Get the first cluster operation log in time order, optionally under given
            /// conditions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='fromTime'>
            /// The start time(exclusive) in UTC
            /// </param>
            /// <param name='toTime'>
            /// The end time(exclusive) in UTC
            /// </param>
            /// <param name='nodeNames'>
            /// A comma-separated list of names for which the logs will be retrieved.
            /// </param>
            public static OperationLog GetClusterFirstOperation(this IHPCPackRestClient operations, string xMsAsUser = default(string), System.DateTime? fromTime = default(System.DateTime?), System.DateTime? toTime = default(System.DateTime?), string nodeNames = default(string))
            {
                return operations.GetClusterFirstOperationAsync(xMsAsUser, fromTime, toTime, nodeNames).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the First Cluster Operation Log in Time Order
            /// </summary>
            /// <remarks>
            /// Get the first cluster operation log in time order, optionally under given
            /// conditions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='fromTime'>
            /// The start time(exclusive) in UTC
            /// </param>
            /// <param name='toTime'>
            /// The end time(exclusive) in UTC
            /// </param>
            /// <param name='nodeNames'>
            /// A comma-separated list of names for which the logs will be retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationLog> GetClusterFirstOperationAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), System.DateTime? fromTime = default(System.DateTime?), System.DateTime? toTime = default(System.DateTime?), string nodeNames = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterFirstOperationWithHttpMessagesAsync(xMsAsUser, fromTime, toTime, nodeNames, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Cluster Operation Log by ID
            /// </summary>
            /// <remarks>
            /// Get cluster operation log by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Operation ID
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static OperationLog GetClusterOperation(this IHPCPackRestClient operations, string id, string xMsAsUser = default(string))
            {
                return operations.GetClusterOperationAsync(id, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Cluster Operation Log by ID
            /// </summary>
            /// <remarks>
            /// Get cluster operation log by ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Operation ID
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationLog> GetClusterOperationAsync(this IHPCPackRestClient operations, string id, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClusterOperationWithHttpMessagesAsync(id, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Node Group List
            /// </summary>
            /// <remarks>
            /// Get the names and descriptions for all of the node groups for the HPC
            /// cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<NodeGroup> GetNodeGroups(this IHPCPackRestClient operations, string xMsAsUser = default(string))
            {
                return operations.GetNodeGroupsAsync(xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Node Group List
            /// </summary>
            /// <remarks>
            /// Get the names and descriptions for all of the node groups for the HPC
            /// cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NodeGroup>> GetNodeGroupsAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNodeGroupsWithHttpMessagesAsync(xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Node Group
            /// </summary>
            /// <remarks>
            /// Create a Node Group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nodeGroup'>
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static NodeGroup CreateNodeGroup(this IHPCPackRestClient operations, NodeGroup nodeGroup = default(NodeGroup), string xMsAsUser = default(string))
            {
                return operations.CreateNodeGroupAsync(nodeGroup, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Node Group
            /// </summary>
            /// <remarks>
            /// Create a Node Group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nodeGroup'>
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NodeGroup> CreateNodeGroupAsync(this IHPCPackRestClient operations, NodeGroup nodeGroup = default(NodeGroup), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNodeGroupWithHttpMessagesAsync(nodeGroup, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Node Group
            /// </summary>
            /// <remarks>
            /// Get a node group by name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node group name.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static NodeGroup GetNodeGroup(this IHPCPackRestClient operations, string name, string xMsAsUser = default(string))
            {
                return operations.GetNodeGroupAsync(name, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Node Group
            /// </summary>
            /// <remarks>
            /// Get a node group by name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node group name.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NodeGroup> GetNodeGroupAsync(this IHPCPackRestClient operations, string name, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNodeGroupWithHttpMessagesAsync(name, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Node Group
            /// </summary>
            /// <remarks>
            /// Update a node group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node group name.
            /// </param>
            /// <param name='nodeGroup'>
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static NodeGroup UpdateNodeGroup(this IHPCPackRestClient operations, string name, NodeGroup nodeGroup = default(NodeGroup), string xMsAsUser = default(string))
            {
                return operations.UpdateNodeGroupAsync(name, nodeGroup, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Node Group
            /// </summary>
            /// <remarks>
            /// Update a node group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node group name.
            /// </param>
            /// <param name='nodeGroup'>
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NodeGroup> UpdateNodeGroupAsync(this IHPCPackRestClient operations, string name, NodeGroup nodeGroup = default(NodeGroup), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateNodeGroupWithHttpMessagesAsync(name, nodeGroup, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Node Group
            /// </summary>
            /// <remarks>
            /// Delete a node group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node group name.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void DeleteNodeGroup(this IHPCPackRestClient operations, string name, string xMsAsUser = default(string))
            {
                operations.DeleteNodeGroupAsync(name, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Node Group
            /// </summary>
            /// <remarks>
            /// Delete a node group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node group name.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteNodeGroupAsync(this IHPCPackRestClient operations, string name, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteNodeGroupWithHttpMessagesAsync(name, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Nodes of a Group
            /// </summary>
            /// <remarks>
            /// Get the list of the nodes that belong to the specified node group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node group name.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<string> GetNodesOfGroup(this IHPCPackRestClient operations, string name, string xMsAsUser = default(string))
            {
                return operations.GetNodesOfGroupAsync(name, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Nodes of a Group
            /// </summary>
            /// <remarks>
            /// Get the list of the nodes that belong to the specified node group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node group name.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetNodesOfGroupAsync(this IHPCPackRestClient operations, string name, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNodesOfGroupWithHttpMessagesAsync(name, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add/Remove Nodes to/from a Group
            /// </summary>
            /// <remarks>
            /// Add nodes to, or remove nodes from, a node group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node group name.
            /// </param>
            /// <param name='operation'>
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<string> MoveNodesOfGroup(this IHPCPackRestClient operations, string name, NodeGroupOperation operation = default(NodeGroupOperation), string xMsAsUser = default(string))
            {
                return operations.MoveNodesOfGroupAsync(name, operation, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add/Remove Nodes to/from a Group
            /// </summary>
            /// <remarks>
            /// Add nodes to, or remove nodes from, a node group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Node group name.
            /// </param>
            /// <param name='operation'>
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> MoveNodesOfGroupAsync(this IHPCPackRestClient operations, string name, NodeGroupOperation operation = default(NodeGroupOperation), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MoveNodesOfGroupWithHttpMessagesAsync(name, operation, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Job List
            /// </summary>
            /// <remarks>
            /// Gets all/filtered jobs for the HPC cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nodeNames'>
            /// A comma-separated list of nodes names. It will list jobs running on these
            /// nodes. When this parameter is specified, all other parameters except the
            /// "x-ms-as-user" header are ignored. All properties of a jobs will be
            /// retrieved. An invalid name will be ignored.
            /// </param>
            /// <param name='properties'>
            /// A comma-separated list of the names for the properties of the jobs for
            /// which you want to get values. See
            /// [ISchedulerJob](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897474%28v%3dvs.85%29)
            /// for available properties.
            /// </param>
            /// <param name='owner'>
            /// The user who created, submitted, or queued the job.
            /// </param>
            /// <param name='filter'>
            /// Filter jobs by specified filters. A filter is in the form of
            /// "&lt;name&gt;%20eq%20&lt;value&gt;", and multiple filters can be ANDed like
            /// "&lt;filter1&gt;%20and%20&lt;filter2&gt;…". Available filter names are
            /// _JobState_, _NodeGroup_ and _ChangeTimeFrom_.
            /// </param>
            /// <param name='sortJobsBy'>
            /// A job property by which jobs will be sorted. If this parameter is not
            /// specified or a property with a specified name does not exist for a job, the
            /// result will be sorted by job Id.
            /// </param>
            /// <param name='asc'>
            /// Specifies the sort order.
            /// </param>
            /// <param name='startRow'>
            /// Specifies the start number of rows to read. The number of the first row is
            /// 0. When this parameter presents, pagination is activated and _queryId_ is
            /// ignored. And the total number of rows will be returned in the response
            /// header _x-ms-row-count_, while no _x-ms-continuation-queryId_ will be
            /// returned.
            /// </param>
            /// <param name='rowsPerRead'>
            /// Specifies how many rows of data to retrieve each time.
            /// </param>
            /// <param name='queryId'>
            /// The value of the _x-ms-continuation-queryId_ header from the previouse
            /// response of this operation, used for reading the next page of data.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<RestObject> GetJobs(this IHPCPackRestClient operations, string nodeNames = default(string), string properties = "Id,Owner,Name,State,Priority", string owner = default(string), string filter = default(string), string sortJobsBy = "Id", bool? asc = default(bool?), double? startRow = default(double?), int? rowsPerRead = 10, string queryId = default(string), string xMsAsUser = default(string))
            {
                return operations.GetJobsAsync(nodeNames, properties, owner, filter, sortJobsBy, asc, startRow, rowsPerRead, queryId, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Job List
            /// </summary>
            /// <remarks>
            /// Gets all/filtered jobs for the HPC cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nodeNames'>
            /// A comma-separated list of nodes names. It will list jobs running on these
            /// nodes. When this parameter is specified, all other parameters except the
            /// "x-ms-as-user" header are ignored. All properties of a jobs will be
            /// retrieved. An invalid name will be ignored.
            /// </param>
            /// <param name='properties'>
            /// A comma-separated list of the names for the properties of the jobs for
            /// which you want to get values. See
            /// [ISchedulerJob](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897474%28v%3dvs.85%29)
            /// for available properties.
            /// </param>
            /// <param name='owner'>
            /// The user who created, submitted, or queued the job.
            /// </param>
            /// <param name='filter'>
            /// Filter jobs by specified filters. A filter is in the form of
            /// "&lt;name&gt;%20eq%20&lt;value&gt;", and multiple filters can be ANDed like
            /// "&lt;filter1&gt;%20and%20&lt;filter2&gt;…". Available filter names are
            /// _JobState_, _NodeGroup_ and _ChangeTimeFrom_.
            /// </param>
            /// <param name='sortJobsBy'>
            /// A job property by which jobs will be sorted. If this parameter is not
            /// specified or a property with a specified name does not exist for a job, the
            /// result will be sorted by job Id.
            /// </param>
            /// <param name='asc'>
            /// Specifies the sort order.
            /// </param>
            /// <param name='startRow'>
            /// Specifies the start number of rows to read. The number of the first row is
            /// 0. When this parameter presents, pagination is activated and _queryId_ is
            /// ignored. And the total number of rows will be returned in the response
            /// header _x-ms-row-count_, while no _x-ms-continuation-queryId_ will be
            /// returned.
            /// </param>
            /// <param name='rowsPerRead'>
            /// Specifies how many rows of data to retrieve each time.
            /// </param>
            /// <param name='queryId'>
            /// The value of the _x-ms-continuation-queryId_ header from the previouse
            /// response of this operation, used for reading the next page of data.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestObject>> GetJobsAsync(this IHPCPackRestClient operations, string nodeNames = default(string), string properties = "Id,Owner,Name,State,Priority", string owner = default(string), string filter = default(string), string sortJobsBy = "Id", bool? asc = default(bool?), double? startRow = default(double?), int? rowsPerRead = 10, string queryId = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobsWithHttpMessagesAsync(nodeNames, properties, owner, filter, sortJobsBy, asc, startRow, rowsPerRead, queryId, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Job
            /// </summary>
            /// <remarks>
            /// Creates a new job on the HPC cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// Properties of job to create
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static int? CreateJob(this IHPCPackRestClient operations, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string))
            {
                return operations.CreateJobAsync(properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Job
            /// </summary>
            /// <remarks>
            /// Creates a new job on the HPC cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// Properties of job to create
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> CreateJobAsync(this IHPCPackRestClient operations, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateJobWithHttpMessagesAsync(properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Job From XML
            /// </summary>
            /// <remarks>
            /// Create a new job on the HPC cluster by using the information in the
            /// specified job XML string.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='xml'>
            /// A job described in XML. For an example:
            ///
            /// ```xml
            /// &lt;Job&gt;
            /// &lt;Tasks&gt;
            /// &lt;Task CommandLine="hostname" MinCores="1" MaxCores="1" /&gt;
            /// &lt;/Tasks&gt;
            /// &lt;/Job&gt;
            /// ```
            ///
            /// Note that since the server accepts input in JSON, the XML has to be encoded
            /// in a JSON string.
            ///
            /// See [Job
            /// Schema](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc907034%28v%3dvs.85%29)
            /// for more details on the XML content.
            /// </param>
            public static int? CreateJobFromXml(this IHPCPackRestClient operations, string xMsAsUser = default(string), string xml = default(string))
            {
                return operations.CreateJobFromXmlAsync(xMsAsUser, xml).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Job From XML
            /// </summary>
            /// <remarks>
            /// Create a new job on the HPC cluster by using the information in the
            /// specified job XML string.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='xml'>
            /// A job described in XML. For an example:
            ///
            /// ```xml
            /// &lt;Job&gt;
            /// &lt;Tasks&gt;
            /// &lt;Task CommandLine="hostname" MinCores="1" MaxCores="1" /&gt;
            /// &lt;/Tasks&gt;
            /// &lt;/Job&gt;
            /// ```
            ///
            /// Note that since the server accepts input in JSON, the XML has to be encoded
            /// in a JSON string.
            ///
            /// See [Job
            /// Schema](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc907034%28v%3dvs.85%29)
            /// for more details on the XML content.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> CreateJobFromXmlAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), string xml = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateJobFromXmlWithHttpMessagesAsync(xMsAsUser, xml, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Job
            /// </summary>
            /// <remarks>
            /// Get information about the specified job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// A comma-separated list of the names for the properties of the job for which
            /// you want to get values. If you do not specify this parameter, the response
            /// contains values for all of the properties of the job. See
            /// [ISchedulerJob](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897474%28v%3dvs.85%29)
            /// for available properties.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<RestProperty> GetJob(this IHPCPackRestClient operations, int jobId, string properties = default(string), string xMsAsUser = default(string))
            {
                return operations.GetJobAsync(jobId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Job
            /// </summary>
            /// <remarks>
            /// Get information about the specified job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// A comma-separated list of the names for the properties of the job for which
            /// you want to get values. If you do not specify this parameter, the response
            /// contains values for all of the properties of the job. See
            /// [ISchedulerJob](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897474%28v%3dvs.85%29)
            /// for available properties.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestProperty>> GetJobAsync(this IHPCPackRestClient operations, int jobId, string properties = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobWithHttpMessagesAsync(jobId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set Job Properties
            /// </summary>
            /// <remarks>
            /// Set the values for the properties of the specified job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// Properties of job to set
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void SetJobProperties(this IHPCPackRestClient operations, int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string))
            {
                operations.SetJobPropertiesAsync(jobId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set Job Properties
            /// </summary>
            /// <remarks>
            /// Set the values for the properties of the specified job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// Properties of job to set
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetJobPropertiesAsync(this IHPCPackRestClient operations, int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetJobPropertiesWithHttpMessagesAsync(jobId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Job Custom Properties
            /// </summary>
            /// <remarks>
            /// Get the values of the specified custom properties for the job, or the
            /// values of all of the properties if none are specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='names'>
            /// A comma-separated list of the names for the custom properties of the job
            /// for which you want to get values. If you do not specify the Names
            /// parameter, the response contains values for all of the custom properties
            /// for the job.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<RestProperty> GetJobCustomProperties(this IHPCPackRestClient operations, int jobId, string names = default(string), string xMsAsUser = default(string))
            {
                return operations.GetJobCustomPropertiesAsync(jobId, names, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Job Custom Properties
            /// </summary>
            /// <remarks>
            /// Get the values of the specified custom properties for the job, or the
            /// values of all of the properties if none are specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='names'>
            /// A comma-separated list of the names for the custom properties of the job
            /// for which you want to get values. If you do not specify the Names
            /// parameter, the response contains values for all of the custom properties
            /// for the job.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestProperty>> GetJobCustomPropertiesAsync(this IHPCPackRestClient operations, int jobId, string names = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobCustomPropertiesWithHttpMessagesAsync(jobId, names, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set Job Custom Properties
            /// </summary>
            /// <remarks>
            /// Set the values of custom properties for a job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// Custom properties for the job
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void SetJobCustomProperties(this IHPCPackRestClient operations, int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string))
            {
                operations.SetJobCustomPropertiesAsync(jobId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set Job Custom Properties
            /// </summary>
            /// <remarks>
            /// Set the values of custom properties for a job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// Custom properties for the job
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetJobCustomPropertiesAsync(this IHPCPackRestClient operations, int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetJobCustomPropertiesWithHttpMessagesAsync(jobId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Job Environment Variables
            /// </summary>
            /// <remarks>
            /// Get the values of the specified environment variables for the job, or the
            /// values of all of the environment variables if none are specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='names'>
            /// A comma-separated list of the names for the environment variables in the
            /// job for which you want to get values. If you do not specify the Names
            /// parameter, the response contains values for all of the environment
            /// variables for the job. If an environment variable with a specified name
            /// does not exist for the job, the response contains an empty string for the
            /// value of that environment variable.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<RestProperty> GetJobEnvironmentVariables(this IHPCPackRestClient operations, int jobId, string names = default(string), string xMsAsUser = default(string))
            {
                return operations.GetJobEnvironmentVariablesAsync(jobId, names, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Job Environment Variables
            /// </summary>
            /// <remarks>
            /// Get the values of the specified environment variables for the job, or the
            /// values of all of the environment variables if none are specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='names'>
            /// A comma-separated list of the names for the environment variables in the
            /// job for which you want to get values. If you do not specify the Names
            /// parameter, the response contains values for all of the environment
            /// variables for the job. If an environment variable with a specified name
            /// does not exist for the job, the response contains an empty string for the
            /// value of that environment variable.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestProperty>> GetJobEnvironmentVariablesAsync(this IHPCPackRestClient operations, int jobId, string names = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobEnvironmentVariablesWithHttpMessagesAsync(jobId, names, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set Job Environment Variables
            /// </summary>
            /// <remarks>
            /// Sets the values of environment variables for a job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// Environment variables for the job
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void SetJobEnvironmentVariables(this IHPCPackRestClient operations, int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string))
            {
                operations.SetJobEnvironmentVariablesAsync(jobId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set Job Environment Variables
            /// </summary>
            /// <remarks>
            /// Sets the values of environment variables for a job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// Environment variables for the job
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetJobEnvironmentVariablesAsync(this IHPCPackRestClient operations, int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetJobEnvironmentVariablesWithHttpMessagesAsync(jobId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Submit Job
            /// </summary>
            /// <remarks>
            /// Submit a job to the HPC Job Scheduler Service so that the HPC Job Scheduler
            /// Service can add the job to the queue of jobs to run. If the credentials for
            /// the account under which the job should run are not cached on the server,
            /// you can set them in the UserName and Password properties. A job that is
            /// submitted by this operation is not validated. After the job is submitted,
            /// you can get information about the job by using the Get Job operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// Properties of job to submit
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void SubmitJob(this IHPCPackRestClient operations, int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string))
            {
                operations.SubmitJobAsync(jobId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submit Job
            /// </summary>
            /// <remarks>
            /// Submit a job to the HPC Job Scheduler Service so that the HPC Job Scheduler
            /// Service can add the job to the queue of jobs to run. If the credentials for
            /// the account under which the job should run are not cached on the server,
            /// you can set them in the UserName and Password properties. A job that is
            /// submitted by this operation is not validated. After the job is submitted,
            /// you can get information about the job by using the Get Job operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// Properties of job to submit
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SubmitJobAsync(this IHPCPackRestClient operations, int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SubmitJobWithHttpMessagesAsync(jobId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancel Job
            /// </summary>
            /// <remarks>
            /// Cancel the specified job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='forced'>
            /// Specifies whether to stop the job immediately without using the grace
            /// period for canceling the tasks in the job and without running the node
            /// release task, if the job contains one. True indicates that the job should
            /// stop immediately without using the grace period for canceling the tasks in
            /// the job and without running the node release task. False indicates that the
            /// job should not stop immediately and should use the grace period for
            /// canceling the tasks in the job and run the node release task.
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void CancelJob(this IHPCPackRestClient operations, int jobId, bool? forced = false, string message = default(string), string xMsAsUser = default(string))
            {
                operations.CancelJobAsync(jobId, forced, message, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel Job
            /// </summary>
            /// <remarks>
            /// Cancel the specified job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='forced'>
            /// Specifies whether to stop the job immediately without using the grace
            /// period for canceling the tasks in the job and without running the node
            /// release task, if the job contains one. True indicates that the job should
            /// stop immediately without using the grace period for canceling the tasks in
            /// the job and without running the node release task. False indicates that the
            /// job should not stop immediately and should use the grace period for
            /// canceling the tasks in the job and run the node release task.
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelJobAsync(this IHPCPackRestClient operations, int jobId, bool? forced = false, string message = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelJobWithHttpMessagesAsync(jobId, forced, message, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Finish Job
            /// </summary>
            /// <remarks>
            /// Finish the specified job. It's silimar to canceling a job, but sets the job
            /// state to "Finished" rather than "Canceled".
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void FinishJob(this IHPCPackRestClient operations, int jobId, string message = default(string), string xMsAsUser = default(string))
            {
                operations.FinishJobAsync(jobId, message, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finish Job
            /// </summary>
            /// <remarks>
            /// Finish the specified job. It's silimar to canceling a job, but sets the job
            /// state to "Finished" rather than "Canceled".
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FinishJobAsync(this IHPCPackRestClient operations, int jobId, string message = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FinishJobWithHttpMessagesAsync(jobId, message, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requeue Job
            /// </summary>
            /// <remarks>
            /// Resubmit the specified job to the queue.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void RequeueJob(this IHPCPackRestClient operations, int jobId, string xMsAsUser = default(string))
            {
                operations.RequeueJobAsync(jobId, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requeue Job
            /// </summary>
            /// <remarks>
            /// Resubmit the specified job to the queue.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RequeueJobAsync(this IHPCPackRestClient operations, int jobId, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RequeueJobWithHttpMessagesAsync(jobId, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Task List
            /// </summary>
            /// <remarks>
            /// Get the values of the properties for all of the tasks in the specified job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// A comma-separated list of the names for the properties of the tasks for
            /// which you want to get values. See
            /// [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85))
            /// for avaialbe properties.
            /// </param>
            /// <param name='expandParametric'>
            /// Specifies whether to get properties only for the master task for a
            /// parametric sweep task, or for all of the subtasks instead. True indicates
            /// that you want to get properties for all of the subtasks. False indicates
            /// that you want to get properties only for the master task.
            /// </param>
            /// <param name='filter'>
            /// Filter tasks by specified filters. A filter is in the form of
            /// "&lt;name&gt;%20eq%20&lt;value&gt;", and multiple filters can be ANDed like
            /// "&lt;filter1&gt;%20and%20&lt;filter2&gt;…". Available filter names are
            /// _TaskState_, _ChangeTimeFrom_, _TaskStates_, _TaskIds_ and
            /// _TaskInstanceIds_.
            /// </param>
            /// <param name='sortTasksBy'>
            /// A task property by which tasks will be sorted. If this parameter is not
            /// specified or a property with a specified name does not exist for a task,
            /// the result will be sorted by task Id.
            /// </param>
            /// <param name='asc'>
            /// Specifies the sort order.
            /// </param>
            /// <param name='startRow'>
            /// Specifies the start number of rows to read. The number of the first row is
            /// 0. When this parameter presents, pagination is activated and _queryId_ is
            /// ignored. And the total number of rows will be returned in the response
            /// header _x-ms-row-count_, while no _x-ms-continuation-queryId_ will be
            /// returned.
            /// </param>
            /// <param name='rowsPerRead'>
            /// Specifies how many rows of data to retrieve each time.
            /// </param>
            /// <param name='queryId'>
            /// The value of the _x-ms-continuation-queryId_ header from the previouse
            /// response of this operation, used for reading the next page of data.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<RestObject> GetTasks(this IHPCPackRestClient operations, int jobId, string properties = "TaskId,Name,State,CommandLine,ExitCode,ParentJobId,JobTaskId,InstanceId", bool? expandParametric = true, string filter = default(string), string sortTasksBy = "TaskId", bool? asc = default(bool?), double? startRow = default(double?), int? rowsPerRead = 10, string queryId = default(string), string xMsAsUser = default(string))
            {
                return operations.GetTasksAsync(jobId, properties, expandParametric, filter, sortTasksBy, asc, startRow, rowsPerRead, queryId, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Task List
            /// </summary>
            /// <remarks>
            /// Get the values of the properties for all of the tasks in the specified job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// A comma-separated list of the names for the properties of the tasks for
            /// which you want to get values. See
            /// [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85))
            /// for avaialbe properties.
            /// </param>
            /// <param name='expandParametric'>
            /// Specifies whether to get properties only for the master task for a
            /// parametric sweep task, or for all of the subtasks instead. True indicates
            /// that you want to get properties for all of the subtasks. False indicates
            /// that you want to get properties only for the master task.
            /// </param>
            /// <param name='filter'>
            /// Filter tasks by specified filters. A filter is in the form of
            /// "&lt;name&gt;%20eq%20&lt;value&gt;", and multiple filters can be ANDed like
            /// "&lt;filter1&gt;%20and%20&lt;filter2&gt;…". Available filter names are
            /// _TaskState_, _ChangeTimeFrom_, _TaskStates_, _TaskIds_ and
            /// _TaskInstanceIds_.
            /// </param>
            /// <param name='sortTasksBy'>
            /// A task property by which tasks will be sorted. If this parameter is not
            /// specified or a property with a specified name does not exist for a task,
            /// the result will be sorted by task Id.
            /// </param>
            /// <param name='asc'>
            /// Specifies the sort order.
            /// </param>
            /// <param name='startRow'>
            /// Specifies the start number of rows to read. The number of the first row is
            /// 0. When this parameter presents, pagination is activated and _queryId_ is
            /// ignored. And the total number of rows will be returned in the response
            /// header _x-ms-row-count_, while no _x-ms-continuation-queryId_ will be
            /// returned.
            /// </param>
            /// <param name='rowsPerRead'>
            /// Specifies how many rows of data to retrieve each time.
            /// </param>
            /// <param name='queryId'>
            /// The value of the _x-ms-continuation-queryId_ header from the previouse
            /// response of this operation, used for reading the next page of data.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestObject>> GetTasksAsync(this IHPCPackRestClient operations, int jobId, string properties = "TaskId,Name,State,CommandLine,ExitCode,ParentJobId,JobTaskId,InstanceId", bool? expandParametric = true, string filter = default(string), string sortTasksBy = "TaskId", bool? asc = default(bool?), double? startRow = default(double?), int? rowsPerRead = 10, string queryId = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTasksWithHttpMessagesAsync(jobId, properties, expandParametric, filter, sortTasksBy, asc, startRow, rowsPerRead, queryId, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add Task
            /// </summary>
            /// <remarks>
            /// Add a task to a job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// Properties of task to add.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static int? AddTask(this IHPCPackRestClient operations, int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string))
            {
                return operations.AddTaskAsync(jobId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add Task
            /// </summary>
            /// <remarks>
            /// Add a task to a job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='properties'>
            /// Properties of task to add.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> AddTaskAsync(this IHPCPackRestClient operations, int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTaskWithHttpMessagesAsync(jobId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Task
            /// </summary>
            /// <remarks>
            /// Get the values of the specified properties for the specified task, or the
            /// values of all of the properties if no properties are specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='properties'>
            /// A comma-separated list of the names for the properties of the task for
            /// which you want to get values. If you do not specify this parameter, the
            /// response contains values for all of the properties of the task. See
            /// [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85))
            /// for avaialbe properties.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<RestProperty> GetTask(this IHPCPackRestClient operations, int jobId, int taskId, string properties = default(string), string xMsAsUser = default(string))
            {
                return operations.GetTaskAsync(jobId, taskId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Task
            /// </summary>
            /// <remarks>
            /// Get the values of the specified properties for the specified task, or the
            /// values of all of the properties if no properties are specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='properties'>
            /// A comma-separated list of the names for the properties of the task for
            /// which you want to get values. If you do not specify this parameter, the
            /// response contains values for all of the properties of the task. See
            /// [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85))
            /// for avaialbe properties.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestProperty>> GetTaskAsync(this IHPCPackRestClient operations, int jobId, int taskId, string properties = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskWithHttpMessagesAsync(jobId, taskId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set Task Properties
            /// </summary>
            /// <remarks>
            /// Set the values of properties for a task in a job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='properties'>
            /// Properties of task to set.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void SetTaskProperties(this IHPCPackRestClient operations, int jobId, int taskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string))
            {
                operations.SetTaskPropertiesAsync(jobId, taskId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set Task Properties
            /// </summary>
            /// <remarks>
            /// Set the values of properties for a task in a job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='properties'>
            /// Properties of task to set.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetTaskPropertiesAsync(this IHPCPackRestClient operations, int jobId, int taskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetTaskPropertiesWithHttpMessagesAsync(jobId, taskId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Task Custom Properties
            /// </summary>
            /// <remarks>
            /// Get the values of the specified custom properties for the task, or the
            /// values of all of the properties if none are specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='names'>
            /// A comma-separated list of the names for the custom properties of the task
            /// for which you want to get values. If you do not specify the Names
            /// parameter, the response contains values for all of the custom properties
            /// for the task.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<RestProperty> GetTaskCustomProperties(this IHPCPackRestClient operations, int jobId, int taskId, string names = default(string), string xMsAsUser = default(string))
            {
                return operations.GetTaskCustomPropertiesAsync(jobId, taskId, names, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Task Custom Properties
            /// </summary>
            /// <remarks>
            /// Get the values of the specified custom properties for the task, or the
            /// values of all of the properties if none are specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='names'>
            /// A comma-separated list of the names for the custom properties of the task
            /// for which you want to get values. If you do not specify the Names
            /// parameter, the response contains values for all of the custom properties
            /// for the task.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestProperty>> GetTaskCustomPropertiesAsync(this IHPCPackRestClient operations, int jobId, int taskId, string names = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskCustomPropertiesWithHttpMessagesAsync(jobId, taskId, names, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set Task Custom Properties
            /// </summary>
            /// <remarks>
            /// Set the values of custom properties for a task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='properties'>
            /// Custom properties for the task
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void SetTaskCustomProperties(this IHPCPackRestClient operations, int jobId, int taskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string))
            {
                operations.SetTaskCustomPropertiesAsync(jobId, taskId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set Task Custom Properties
            /// </summary>
            /// <remarks>
            /// Set the values of custom properties for a task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='properties'>
            /// Custom properties for the task
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetTaskCustomPropertiesAsync(this IHPCPackRestClient operations, int jobId, int taskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetTaskCustomPropertiesWithHttpMessagesAsync(jobId, taskId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Task Environment Variables
            /// </summary>
            /// <remarks>
            /// Get the values of the specified environment variables for the task, or the
            /// values of all of the environment variables if none are specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='names'>
            /// A comma-separated list of the names for the environment variables in the
            /// task for which you want to get values. If you do not specify the Names
            /// parameter, the response contains values for all of the environment
            /// variables for the task. If an environment variable with a specified name
            /// does not exist for the task, the response contains an empty string for the
            /// value of that environment variable.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<RestProperty> GetTaskEnvironmentVariables(this IHPCPackRestClient operations, int jobId, int taskId, string names = default(string), string xMsAsUser = default(string))
            {
                return operations.GetTaskEnvironmentVariablesAsync(jobId, taskId, names, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Task Environment Variables
            /// </summary>
            /// <remarks>
            /// Get the values of the specified environment variables for the task, or the
            /// values of all of the environment variables if none are specified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='names'>
            /// A comma-separated list of the names for the environment variables in the
            /// task for which you want to get values. If you do not specify the Names
            /// parameter, the response contains values for all of the environment
            /// variables for the task. If an environment variable with a specified name
            /// does not exist for the task, the response contains an empty string for the
            /// value of that environment variable.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestProperty>> GetTaskEnvironmentVariablesAsync(this IHPCPackRestClient operations, int jobId, int taskId, string names = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskEnvironmentVariablesWithHttpMessagesAsync(jobId, taskId, names, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set Task Environment Variables
            /// </summary>
            /// <remarks>
            /// Set the value of one or more environment variables for a task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='properties'>
            /// Environment variables for the task
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void SetTaskEnvironmentVariables(this IHPCPackRestClient operations, int jobId, int taskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string))
            {
                operations.SetTaskEnvironmentVariablesAsync(jobId, taskId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set Task Environment Variables
            /// </summary>
            /// <remarks>
            /// Set the value of one or more environment variables for a task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='properties'>
            /// Environment variables for the task
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetTaskEnvironmentVariablesAsync(this IHPCPackRestClient operations, int jobId, int taskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetTaskEnvironmentVariablesWithHttpMessagesAsync(jobId, taskId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancel Task
            /// </summary>
            /// <remarks>
            /// Cancel the specified task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='forced'>
            /// Specifies whether to stop the task immediately without using the grace
            /// period for canceling a task. True indicates that the task should stop
            /// immediately without using the grace period for canceling a task. False
            /// indicates that the task should use the grace period for canceling a task.
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void CancelTask(this IHPCPackRestClient operations, int jobId, int taskId, bool? forced = false, string message = default(string), string xMsAsUser = default(string))
            {
                operations.CancelTaskAsync(jobId, taskId, forced, message, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel Task
            /// </summary>
            /// <remarks>
            /// Cancel the specified task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='forced'>
            /// Specifies whether to stop the task immediately without using the grace
            /// period for canceling a task. True indicates that the task should stop
            /// immediately without using the grace period for canceling a task. False
            /// indicates that the task should use the grace period for canceling a task.
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelTaskAsync(this IHPCPackRestClient operations, int jobId, int taskId, bool? forced = false, string message = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelTaskWithHttpMessagesAsync(jobId, taskId, forced, message, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Finish Task
            /// </summary>
            /// <remarks>
            /// Finish the specified task. It's silimar to canceling a task, but sets the
            /// task state to "Finished" rather than "Canceled".
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void FinishTask(this IHPCPackRestClient operations, int jobId, int taskId, string message = default(string), string xMsAsUser = default(string))
            {
                operations.FinishTaskAsync(jobId, taskId, message, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finish Task
            /// </summary>
            /// <remarks>
            /// Finish the specified task. It's silimar to canceling a task, but sets the
            /// task state to "Finished" rather than "Canceled".
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FinishTaskAsync(this IHPCPackRestClient operations, int jobId, int taskId, string message = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FinishTaskWithHttpMessagesAsync(jobId, taskId, message, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requeue Task
            /// </summary>
            /// <remarks>
            /// Move a failed, canceled, or queued task to the configuring state so that
            /// the task can be queued again when the job is resubmitted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void RequeueTask(this IHPCPackRestClient operations, int jobId, int taskId, string message = default(string), string xMsAsUser = default(string))
            {
                operations.RequeueTaskAsync(jobId, taskId, message, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requeue Task
            /// </summary>
            /// <remarks>
            /// Move a failed, canceled, or queued task to the configuring state so that
            /// the task can be queued again when the job is resubmitted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RequeueTaskAsync(this IHPCPackRestClient operations, int jobId, int taskId, string message = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RequeueTaskWithHttpMessagesAsync(jobId, taskId, message, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Subtask
            /// </summary>
            /// <remarks>
            /// Get the values of the specified properties for the specified subtask, or
            /// the values of all of the properties if no properties are specified. Only
            /// Parameteric Sweep job have subtasks.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='subtaskId'>
            /// Subtask Id
            /// </param>
            /// <param name='properties'>
            /// A comma-separated list of the names for the properties of the subtask for
            /// which you want to get values. If you do not specify this parameter, the
            /// response contains values for all of the properties of the subtask. See
            /// [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85))
            /// for avaialbe properties.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<RestProperty> GetSubtask(this IHPCPackRestClient operations, int jobId, int taskId, int subtaskId, string properties = default(string), string xMsAsUser = default(string))
            {
                return operations.GetSubtaskAsync(jobId, taskId, subtaskId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Subtask
            /// </summary>
            /// <remarks>
            /// Get the values of the specified properties for the specified subtask, or
            /// the values of all of the properties if no properties are specified. Only
            /// Parameteric Sweep job have subtasks.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='subtaskId'>
            /// Subtask Id
            /// </param>
            /// <param name='properties'>
            /// A comma-separated list of the names for the properties of the subtask for
            /// which you want to get values. If you do not specify this parameter, the
            /// response contains values for all of the properties of the subtask. See
            /// [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85))
            /// for avaialbe properties.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestProperty>> GetSubtaskAsync(this IHPCPackRestClient operations, int jobId, int taskId, int subtaskId, string properties = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubtaskWithHttpMessagesAsync(jobId, taskId, subtaskId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set Subtask Properties
            /// </summary>
            /// <remarks>
            /// Set the values of properties for a subtask in a job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='subtaskId'>
            /// Subtask Id
            /// </param>
            /// <param name='properties'>
            /// Properties of subtask to set.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void SetSubtaskProperties(this IHPCPackRestClient operations, int jobId, int taskId, int subtaskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string))
            {
                operations.SetSubtaskPropertiesAsync(jobId, taskId, subtaskId, properties, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set Subtask Properties
            /// </summary>
            /// <remarks>
            /// Set the values of properties for a subtask in a job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='subtaskId'>
            /// Subtask Id
            /// </param>
            /// <param name='properties'>
            /// Properties of subtask to set.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetSubtaskPropertiesAsync(this IHPCPackRestClient operations, int jobId, int taskId, int subtaskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetSubtaskPropertiesWithHttpMessagesAsync(jobId, taskId, subtaskId, properties, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancel Subtask
            /// </summary>
            /// <remarks>
            /// Cancel the specified subtask.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='subtaskId'>
            /// Subtask Id
            /// </param>
            /// <param name='forced'>
            /// Specifies whether to stop the subtask immediately without using the grace
            /// period for canceling a task. True indicates that the subtask should stop
            /// immediately without using the grace period for canceling a task. False
            /// indicates that the subtask should use the grace period for canceling.
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void CancelSubtask(this IHPCPackRestClient operations, int jobId, int taskId, int subtaskId, bool? forced = false, string message = default(string), string xMsAsUser = default(string))
            {
                operations.CancelSubtaskAsync(jobId, taskId, subtaskId, forced, message, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel Subtask
            /// </summary>
            /// <remarks>
            /// Cancel the specified subtask.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='subtaskId'>
            /// Subtask Id
            /// </param>
            /// <param name='forced'>
            /// Specifies whether to stop the subtask immediately without using the grace
            /// period for canceling a task. True indicates that the subtask should stop
            /// immediately without using the grace period for canceling a task. False
            /// indicates that the subtask should use the grace period for canceling.
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelSubtaskAsync(this IHPCPackRestClient operations, int jobId, int taskId, int subtaskId, bool? forced = false, string message = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelSubtaskWithHttpMessagesAsync(jobId, taskId, subtaskId, forced, message, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Finish Subtask
            /// </summary>
            /// <remarks>
            /// Finish the specified subtask.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='subtaskId'>
            /// Subtask Id
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void FinishSubtask(this IHPCPackRestClient operations, int jobId, int taskId, int subtaskId, string message = default(string), string xMsAsUser = default(string))
            {
                operations.FinishSubtaskAsync(jobId, taskId, subtaskId, message, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Finish Subtask
            /// </summary>
            /// <remarks>
            /// Finish the specified subtask.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='subtaskId'>
            /// Subtask Id
            /// </param>
            /// <param name='message'>
            /// A message for the operation.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FinishSubtaskAsync(this IHPCPackRestClient operations, int jobId, int taskId, int subtaskId, string message = default(string), string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FinishSubtaskWithHttpMessagesAsync(jobId, taskId, subtaskId, message, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Requeue Subtask
            /// </summary>
            /// <remarks>
            /// Move a failed, canceled, or queued subtask to the configuring state so that
            /// the subtask can be queued again when the job is resubmitted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='subtaskId'>
            /// Subtask Id
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static void RequeueSubtask(this IHPCPackRestClient operations, int jobId, int taskId, int subtaskId, string xMsAsUser = default(string))
            {
                operations.RequeueSubtaskAsync(jobId, taskId, subtaskId, xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requeue Subtask
            /// </summary>
            /// <remarks>
            /// Move a failed, canceled, or queued subtask to the configuring state so that
            /// the subtask can be queued again when the job is resubmitted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Job Id
            /// </param>
            /// <param name='taskId'>
            /// Task Id
            /// </param>
            /// <param name='subtaskId'>
            /// Subtask Id
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RequeueSubtaskAsync(this IHPCPackRestClient operations, int jobId, int taskId, int subtaskId, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RequeueSubtaskWithHttpMessagesAsync(jobId, taskId, subtaskId, xMsAsUser, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Job Templates
            /// </summary>
            /// <remarks>
            /// Get a list of the names of the job templates that are available on the HPC
            /// cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            public static IList<string> GetJobTemplates(this IHPCPackRestClient operations, string xMsAsUser = default(string))
            {
                return operations.GetJobTemplatesAsync(xMsAsUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Job Templates
            /// </summary>
            /// <remarks>
            /// Get a list of the names of the job templates that are available on the HPC
            /// cluster.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsAsUser'>
            /// The name of user whom you want to make request as. You must be an HPC Pack
            /// administrator or HPC Pack Job administrator to make it work.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetJobTemplatesAsync(this IHPCPackRestClient operations, string xMsAsUser = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobTemplatesWithHttpMessagesAsync(xMsAsUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
