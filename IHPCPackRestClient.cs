// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Hpc.Rest
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// This is the API spec for Microsoft HPC Pack 2019.
    /// </summary>
    public partial interface IHPCPackRestClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Get HPC Pack Version
        /// </summary>
        /// <remarks>
        /// Get the version of Microsoft HPC Pack installed on the HPC cluster
        /// that hosts the web service.
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetClusterVersionWithHttpMessagesAsync(string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Active Head Node Name
        /// </summary>
        /// <remarks>
        /// Get the name of the active head node of the HPC Pack cluster.
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetClusterActiveHeadNodeWithHttpMessagesAsync(string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get DateTime Format
        /// </summary>
        /// <remarks>
        /// Get DateTime format for the DateTime objects returned in the API
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetClusterDateTimeFormatWithHttpMessagesAsync(string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cluster User Roles
        /// </summary>
        /// <remarks>
        /// Get the roles of the cluster user who makes the API call.
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> GetUserRolesWithHttpMessagesAsync(string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get cluster metric definitions
        /// </summary>
        /// <remarks>
        /// Get cluster metric definitions. You can then get the history of a
        /// metric.
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<MetricDefinition>>> GetClusterMetricDefintionsWithHttpMessagesAsync(string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get cluster metric history
        /// </summary>
        /// <remarks>
        /// Get cluster metric history
        /// </remarks>
        /// <param name='name'>
        /// Metric name
        /// </param>
        /// <param name='fromTime'>
        /// The start time in UTC
        /// </param>
        /// <param name='toTime'>
        /// The end time in UTC
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MetricData>> GetClusterMetricHistoryWithHttpMessagesAsync(string name, System.DateTime fromTime, System.DateTime toTime, string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cluster Job Metrics
        /// </summary>
        /// <remarks>
        /// Get cluster job metrics for the last 7 days.
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MetricData>> GetClusterJobMetricsWithHttpMessagesAsync(string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cluster Nodes
        /// </summary>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='names'>
        /// A comma-separated list of node names.
        /// </param>
        /// <param name='jobs'>
        /// A comma-separated list of job ids.
        /// </param>
        /// <param name='group'>
        /// A node group name.
        /// </param>
        /// <param name='state'>
        /// Node state. Possible values include: 'Unknown', 'Provisioning',
        /// 'Offline', 'Starting', 'Online', 'Draining', 'Rejected',
        /// 'Removing', 'NotDeployed', 'Stopping'
        /// </param>
        /// <param name='health'>
        /// Node health. Possible values include: 'OK', 'Warning', 'Error',
        /// 'Transitional', 'Unapproved'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Node>>> GetClusterNodesWithHttpMessagesAsync(string xMsAsUser = default(string), string names = default(string), string jobs = default(string), string group = default(string), string state = default(string), string health = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cluster Node by Name
        /// </summary>
        /// <param name='name'>
        /// Node name
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Node>> GetClusterNodeWithHttpMessagesAsync(string name, string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Operate a Cluster Node
        /// </summary>
        /// <remarks>
        /// The requested operation will be performed asynchronously. The API
        /// doesn't ensure it's successfully on return. The caller has to query
        /// the node state for the operation result.
        ///
        /// </remarks>
        /// <param name='name'>
        /// Node name
        /// </param>
        /// <param name='operation'>
        /// Possible values include: 'start', 'stop', 'reboot', 'shutdown',
        /// 'bringOnline', 'takeOffline'
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> OperateClusterNodeWithHttpMessagesAsync(string name, string operation, string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Node Metrics
        /// </summary>
        /// <remarks>
        /// Get metrics of nodes
        /// </remarks>
        /// <param name='metricNames'>
        /// A comma separated names of metrics, available names are
        /// HPCCpuUsage, HPCMemoryPaging, HPCDiskThroughput, HPCNetwork and
        /// HPCCoresInUse
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NodeMetric>>> GetClusterNodeMetricsWithHttpMessagesAsync(string metricNames, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cluster Node Stat of State
        /// </summary>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NodeStatOfStateItem>>> GetClusterNodeStatOfStateWithHttpMessagesAsync(string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cluster Node Stat of Health
        /// </summary>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NodeStatOfHealthItem>>> GetClusterNodeStatOfHealthWithHttpMessagesAsync(string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cluster Operation Logs
        /// </summary>
        /// <remarks>
        /// Get cluster operation logs in time order, with the latest log being
        /// first.
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='fromTime'>
        /// The start time(exclusive) in UTC
        /// </param>
        /// <param name='toTime'>
        /// The end time(exclusive) in UTC
        /// </param>
        /// <param name='limit'>
        /// The max number of logs to return
        /// </param>
        /// <param name='nodeNames'>
        /// A comma-separated list of names for which the logs will be
        /// retrieved.
        /// </param>
        /// <param name='withDetail'>
        /// Whether to include the "Entries" property for each log. By deafult
        /// no "Entries" will be returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<OperationLog>>> GetClusterOperationsWithHttpMessagesAsync(string xMsAsUser = default(string), System.DateTime? fromTime = default(System.DateTime?), System.DateTime? toTime = default(System.DateTime?), double? limit = default(double?), string nodeNames = default(string), bool? withDetail = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the First Cluster Operation Log in Time Order
        /// </summary>
        /// <remarks>
        /// Get the first cluster operation log in time order, optionally under
        /// given conditions.
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='fromTime'>
        /// The start time(exclusive) in UTC
        /// </param>
        /// <param name='toTime'>
        /// The end time(exclusive) in UTC
        /// </param>
        /// <param name='nodeNames'>
        /// A comma-separated list of names for which the logs will be
        /// retrieved.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<OperationLog>> GetClusterFirstOperationWithHttpMessagesAsync(string xMsAsUser = default(string), System.DateTime? fromTime = default(System.DateTime?), System.DateTime? toTime = default(System.DateTime?), string nodeNames = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Cluster Operation Log by ID
        /// </summary>
        /// <remarks>
        /// Get cluster operation log by ID.
        /// </remarks>
        /// <param name='id'>
        /// Operation ID
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<OperationLog>> GetClusterOperationWithHttpMessagesAsync(string id, string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Node Group List
        /// </summary>
        /// <remarks>
        /// Get the names and descriptions for all of the node groups for the
        /// HPC cluster.
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NodeGroup>>> GetNodeGroupsWithHttpMessagesAsync(string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a Node Group
        /// </summary>
        /// <remarks>
        /// Create a Node Group
        /// </remarks>
        /// <param name='nodeGroup'>
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<NodeGroup>> CreateNodeGroupWithHttpMessagesAsync(NodeGroup nodeGroup = default(NodeGroup), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Node Group
        /// </summary>
        /// <remarks>
        /// Get a node group by name.
        /// </remarks>
        /// <param name='name'>
        /// Node group name.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<NodeGroup>> GetNodeGroupWithHttpMessagesAsync(string name, string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Node Group
        /// </summary>
        /// <remarks>
        /// Update a node group.
        /// </remarks>
        /// <param name='name'>
        /// Node group name.
        /// </param>
        /// <param name='nodeGroup'>
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<NodeGroup>> UpdateNodeGroupWithHttpMessagesAsync(string name, NodeGroup nodeGroup = default(NodeGroup), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Node Group
        /// </summary>
        /// <remarks>
        /// Delete a node group.
        /// </remarks>
        /// <param name='name'>
        /// Node group name.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteNodeGroupWithHttpMessagesAsync(string name, string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Nodes of a Group
        /// </summary>
        /// <remarks>
        /// Get the list of the nodes that belong to the specified node group.
        /// </remarks>
        /// <param name='name'>
        /// Node group name.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> GetNodesOfGroupWithHttpMessagesAsync(string name, string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add/Remove Nodes to/from a Group
        /// </summary>
        /// <remarks>
        /// Add nodes to, or remove nodes from, a node group.
        /// </remarks>
        /// <param name='name'>
        /// Node group name.
        /// </param>
        /// <param name='operation'>
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> MoveNodesOfGroupWithHttpMessagesAsync(string name, NodeGroupOperation operation = default(NodeGroupOperation), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Job List
        /// </summary>
        /// <remarks>
        /// Gets all/filtered jobs for the HPC cluster.
        /// </remarks>
        /// <param name='nodeNames'>
        /// A comma-separated list of nodes names. It will list jobs running on
        /// these nodes. When this parameter is specified, all other parameters
        /// except the "x-ms-as-user" header are ignored. All properties of a
        /// jobs will be retrieved. An invalid name will be ignored.
        /// </param>
        /// <param name='properties'>
        /// A comma-separated list of the names for the properties of the jobs
        /// for which you want to get values. See
        /// [ISchedulerJob](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897474%28v%3dvs.85%29)
        /// for available properties.
        /// </param>
        /// <param name='owner'>
        /// The user who created, submitted, or queued the job.
        /// </param>
        /// <param name='filter'>
        /// Filter jobs by specified filters. A filter is in the form of
        /// "&lt;name&gt;%20eq%20&lt;value&gt;", and multiple filters can be
        /// ANDed like "&lt;filter1&gt;%20and%20&lt;filter2&gt;…". Available
        /// filter names are _JobState_, _NodeGroup_ and _ChangeTimeFrom_.
        /// </param>
        /// <param name='sortJobsBy'>
        /// A job property by which jobs will be sorted. If this parameter is
        /// not specified or a property with a specified name does not exist
        /// for a job, the result will be sorted by job Id.
        /// </param>
        /// <param name='asc'>
        /// Specifies the sort order.
        /// </param>
        /// <param name='startRow'>
        /// Specifies the start number of rows to read. The number of the first
        /// row is 0. When this parameter presents, pagination is activated and
        /// _queryId_ is ignored. And the total number of rows will be returned
        /// in the response header _x-ms-row-count_, while no
        /// _x-ms-continuation-queryId_ will be returned.
        /// </param>
        /// <param name='rowsPerRead'>
        /// Specifies how many rows of data to retrieve each time.
        /// </param>
        /// <param name='queryId'>
        /// The value of the _x-ms-continuation-queryId_ header from the
        /// previouse response of this operation, used for reading the next
        /// page of data.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestObject>,GetJobsHeaders>> GetJobsWithHttpMessagesAsync(string nodeNames = default(string), string properties = "Id,Owner,Name,State,Priority", string owner = default(string), string filter = default(string), string sortJobsBy = "Id", bool? asc = default(bool?), double? startRow = default(double?), int? rowsPerRead = 10, string queryId = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Job
        /// </summary>
        /// <remarks>
        /// Creates a new job on the HPC cluster.
        /// </remarks>
        /// <param name='properties'>
        /// Properties of job to create
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<int?>> CreateJobWithHttpMessagesAsync(IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Job From XML
        /// </summary>
        /// <remarks>
        /// Create a new job on the HPC cluster by using the information in the
        /// specified job XML string.
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='xml'>
        /// A job described in XML. For an example:
        ///
        /// ```xml
        /// &lt;Job&gt;
        /// &lt;Tasks&gt;
        /// &lt;Task CommandLine="hostname" MinCores="1" MaxCores="1" /&gt;
        /// &lt;/Tasks&gt;
        /// &lt;/Job&gt;
        /// ```
        ///
        /// Note that since the server accepts input in JSON, the XML has to be
        /// encoded in a JSON string.
        ///
        /// See [Job
        /// Schema](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc907034%28v%3dvs.85%29)
        /// for more details on the XML content.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<int?>> CreateJobFromXmlWithHttpMessagesAsync(string xMsAsUser = default(string), string xml = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// Get information about the specified job.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='properties'>
        /// A comma-separated list of the names for the properties of the job
        /// for which you want to get values. If you do not specify this
        /// parameter, the response contains values for all of the properties
        /// of the job. See
        /// [ISchedulerJob](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897474%28v%3dvs.85%29)
        /// for available properties.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestProperty>>> GetJobWithHttpMessagesAsync(int jobId, string properties = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set Job Properties
        /// </summary>
        /// <remarks>
        /// Set the values for the properties of the specified job.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='properties'>
        /// Properties of job to set
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetJobPropertiesWithHttpMessagesAsync(int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Job Custom Properties
        /// </summary>
        /// <remarks>
        /// Get the values of the specified custom properties for the job, or
        /// the values of all of the properties if none are specified.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='names'>
        /// A comma-separated list of the names for the custom properties of
        /// the job for which you want to get values. If you do not specify the
        /// Names parameter, the response contains values for all of the custom
        /// properties for the job.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestProperty>>> GetJobCustomPropertiesWithHttpMessagesAsync(int jobId, string names = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set Job Custom Properties
        /// </summary>
        /// <remarks>
        /// Set the values of custom properties for a job.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='properties'>
        /// Custom properties for the job
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetJobCustomPropertiesWithHttpMessagesAsync(int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Job Environment Variables
        /// </summary>
        /// <remarks>
        /// Get the values of the specified environment variables for the job,
        /// or the values of all of the environment variables if none are
        /// specified.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='names'>
        /// A comma-separated list of the names for the environment variables
        /// in the job for which you want to get values. If you do not specify
        /// the Names parameter, the response contains values for all of the
        /// environment variables for the job. If an environment variable with
        /// a specified name does not exist for the job, the response contains
        /// an empty string for the value of that environment variable.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestProperty>>> GetJobEnvironmentVariablesWithHttpMessagesAsync(int jobId, string names = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set Job Environment Variables
        /// </summary>
        /// <remarks>
        /// Sets the values of environment variables for a job.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='properties'>
        /// Environment variables for the job
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetJobEnvironmentVariablesWithHttpMessagesAsync(int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Submit Job
        /// </summary>
        /// <remarks>
        /// Submit a job to the HPC Job Scheduler Service so that the HPC Job
        /// Scheduler Service can add the job to the queue of jobs to run. If
        /// the credentials for the account under which the job should run are
        /// not cached on the server, you can set them in the UserName and
        /// Password properties. A job that is submitted by this operation is
        /// not validated. After the job is submitted, you can get information
        /// about the job by using the Get Job operation.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='properties'>
        /// Properties of job to submit
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SubmitJobWithHttpMessagesAsync(int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel Job
        /// </summary>
        /// <remarks>
        /// Cancel the specified job.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='forced'>
        /// Specifies whether to stop the job immediately without using the
        /// grace period for canceling the tasks in the job and without running
        /// the node release task, if the job contains one. True indicates that
        /// the job should stop immediately without using the grace period for
        /// canceling the tasks in the job and without running the node release
        /// task. False indicates that the job should not stop immediately and
        /// should use the grace period for canceling the tasks in the job and
        /// run the node release task.
        /// </param>
        /// <param name='message'>
        /// A message for the operation.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CancelJobWithHttpMessagesAsync(int jobId, bool? forced = false, string message = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finish Job
        /// </summary>
        /// <remarks>
        /// Finish the specified job. It's silimar to canceling a job, but sets
        /// the job state to "Finished" rather than "Canceled".
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='message'>
        /// A message for the operation.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> FinishJobWithHttpMessagesAsync(int jobId, string message = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requeue Job
        /// </summary>
        /// <remarks>
        /// Resubmit the specified job to the queue.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RequeueJobWithHttpMessagesAsync(int jobId, string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Task List
        /// </summary>
        /// <remarks>
        /// Get the values of the properties for all of the tasks in the
        /// specified job.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='properties'>
        /// A comma-separated list of the names for the properties of the tasks
        /// for which you want to get values. See
        /// [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85))
        /// for avaialbe properties.
        /// </param>
        /// <param name='expandParametric'>
        /// Specifies whether to get properties only for the master task for a
        /// parametric sweep task, or for all of the subtasks instead. True
        /// indicates that you want to get properties for all of the subtasks.
        /// False indicates that you want to get properties only for the master
        /// task.
        /// </param>
        /// <param name='filter'>
        /// Filter tasks by specified filters. A filter is in the form of
        /// "&lt;name&gt;%20eq%20&lt;value&gt;", and multiple filters can be
        /// ANDed like "&lt;filter1&gt;%20and%20&lt;filter2&gt;…". Available
        /// filter names are _TaskState_, _ChangeTimeFrom_, _TaskStates_,
        /// _TaskIds_ and _TaskInstanceIds_.
        /// </param>
        /// <param name='sortTasksBy'>
        /// A task property by which tasks will be sorted. If this parameter is
        /// not specified or a property with a specified name does not exist
        /// for a task, the result will be sorted by task Id.
        /// </param>
        /// <param name='asc'>
        /// Specifies the sort order.
        /// </param>
        /// <param name='startRow'>
        /// Specifies the start number of rows to read. The number of the first
        /// row is 0. When this parameter presents, pagination is activated and
        /// _queryId_ is ignored. And the total number of rows will be returned
        /// in the response header _x-ms-row-count_, while no
        /// _x-ms-continuation-queryId_ will be returned.
        /// </param>
        /// <param name='rowsPerRead'>
        /// Specifies how many rows of data to retrieve each time.
        /// </param>
        /// <param name='queryId'>
        /// The value of the _x-ms-continuation-queryId_ header from the
        /// previouse response of this operation, used for reading the next
        /// page of data.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestObject>,GetTasksHeaders>> GetTasksWithHttpMessagesAsync(int jobId, string properties = "TaskId,Name,State,CommandLine,ExitCode,ParentJobId,JobTaskId,InstanceId", bool? expandParametric = true, string filter = default(string), string sortTasksBy = "TaskId", bool? asc = default(bool?), double? startRow = default(double?), int? rowsPerRead = 10, string queryId = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add Task
        /// </summary>
        /// <remarks>
        /// Add a task to a job.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='properties'>
        /// Properties of task to add.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<int?>> AddTaskWithHttpMessagesAsync(int jobId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Task
        /// </summary>
        /// <remarks>
        /// Get the values of the specified properties for the specified task,
        /// or the values of all of the properties if no properties are
        /// specified.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='properties'>
        /// A comma-separated list of the names for the properties of the task
        /// for which you want to get values. If you do not specify this
        /// parameter, the response contains values for all of the properties
        /// of the task. See
        /// [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85))
        /// for avaialbe properties.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestProperty>>> GetTaskWithHttpMessagesAsync(int jobId, int taskId, string properties = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set Task Properties
        /// </summary>
        /// <remarks>
        /// Set the values of properties for a task in a job.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='properties'>
        /// Properties of task to set.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetTaskPropertiesWithHttpMessagesAsync(int jobId, int taskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Task Custom Properties
        /// </summary>
        /// <remarks>
        /// Get the values of the specified custom properties for the task, or
        /// the values of all of the properties if none are specified.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='names'>
        /// A comma-separated list of the names for the custom properties of
        /// the task for which you want to get values. If you do not specify
        /// the Names parameter, the response contains values for all of the
        /// custom properties for the task.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestProperty>>> GetTaskCustomPropertiesWithHttpMessagesAsync(int jobId, int taskId, string names = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set Task Custom Properties
        /// </summary>
        /// <remarks>
        /// Set the values of custom properties for a task.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='properties'>
        /// Custom properties for the task
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetTaskCustomPropertiesWithHttpMessagesAsync(int jobId, int taskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Task Environment Variables
        /// </summary>
        /// <remarks>
        /// Get the values of the specified environment variables for the task,
        /// or the values of all of the environment variables if none are
        /// specified.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='names'>
        /// A comma-separated list of the names for the environment variables
        /// in the task for which you want to get values. If you do not specify
        /// the Names parameter, the response contains values for all of the
        /// environment variables for the task. If an environment variable with
        /// a specified name does not exist for the task, the response contains
        /// an empty string for the value of that environment variable.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestProperty>>> GetTaskEnvironmentVariablesWithHttpMessagesAsync(int jobId, int taskId, string names = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set Task Environment Variables
        /// </summary>
        /// <remarks>
        /// Set the value of one or more environment variables for a task.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='properties'>
        /// Environment variables for the task
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetTaskEnvironmentVariablesWithHttpMessagesAsync(int jobId, int taskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel Task
        /// </summary>
        /// <remarks>
        /// Cancel the specified task.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='forced'>
        /// Specifies whether to stop the task immediately without using the
        /// grace period for canceling a task. True indicates that the task
        /// should stop immediately without using the grace period for
        /// canceling a task. False indicates that the task should use the
        /// grace period for canceling a task.
        /// </param>
        /// <param name='message'>
        /// A message for the operation.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CancelTaskWithHttpMessagesAsync(int jobId, int taskId, bool? forced = false, string message = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finish Task
        /// </summary>
        /// <remarks>
        /// Finish the specified task. It's silimar to canceling a task, but
        /// sets the task state to "Finished" rather than "Canceled".
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='message'>
        /// A message for the operation.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> FinishTaskWithHttpMessagesAsync(int jobId, int taskId, string message = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requeue Task
        /// </summary>
        /// <remarks>
        /// Move a failed, canceled, or queued task to the configuring state so
        /// that the task can be queued again when the job is resubmitted.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='message'>
        /// A message for the operation.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RequeueTaskWithHttpMessagesAsync(int jobId, int taskId, string message = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Subtask
        /// </summary>
        /// <remarks>
        /// Get the values of the specified properties for the specified
        /// subtask, or the values of all of the properties if no properties
        /// are specified. Only Parameteric Sweep job have subtasks.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='subtaskId'>
        /// Subtask Id
        /// </param>
        /// <param name='properties'>
        /// A comma-separated list of the names for the properties of the
        /// subtask for which you want to get values. If you do not specify
        /// this parameter, the response contains values for all of the
        /// properties of the subtask. See
        /// [ISchedulerTask](https://docs.microsoft.com/en-us/previous-versions/windows/desktop/cc897577(v=vs.85))
        /// for avaialbe properties.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestProperty>>> GetSubtaskWithHttpMessagesAsync(int jobId, int taskId, int subtaskId, string properties = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set Subtask Properties
        /// </summary>
        /// <remarks>
        /// Set the values of properties for a subtask in a job.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='subtaskId'>
        /// Subtask Id
        /// </param>
        /// <param name='properties'>
        /// Properties of subtask to set.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetSubtaskPropertiesWithHttpMessagesAsync(int jobId, int taskId, int subtaskId, IList<RestProperty> properties = default(IList<RestProperty>), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel Subtask
        /// </summary>
        /// <remarks>
        /// Cancel the specified subtask.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='subtaskId'>
        /// Subtask Id
        /// </param>
        /// <param name='forced'>
        /// Specifies whether to stop the subtask immediately without using the
        /// grace period for canceling a task. True indicates that the subtask
        /// should stop immediately without using the grace period for
        /// canceling a task. False indicates that the subtask should use the
        /// grace period for canceling.
        /// </param>
        /// <param name='message'>
        /// A message for the operation.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CancelSubtaskWithHttpMessagesAsync(int jobId, int taskId, int subtaskId, bool? forced = false, string message = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finish Subtask
        /// </summary>
        /// <remarks>
        /// Finish the specified subtask.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='subtaskId'>
        /// Subtask Id
        /// </param>
        /// <param name='message'>
        /// A message for the operation.
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> FinishSubtaskWithHttpMessagesAsync(int jobId, int taskId, int subtaskId, string message = default(string), string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Requeue Subtask
        /// </summary>
        /// <remarks>
        /// Move a failed, canceled, or queued subtask to the configuring state
        /// so that the subtask can be queued again when the job is
        /// resubmitted.
        /// </remarks>
        /// <param name='jobId'>
        /// Job Id
        /// </param>
        /// <param name='taskId'>
        /// Task Id
        /// </param>
        /// <param name='subtaskId'>
        /// Subtask Id
        /// </param>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RequeueSubtaskWithHttpMessagesAsync(int jobId, int taskId, int subtaskId, string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Job Templates
        /// </summary>
        /// <remarks>
        /// Get a list of the names of the job templates that are available on
        /// the HPC cluster.
        /// </remarks>
        /// <param name='xMsAsUser'>
        /// The name of user whom you want to make request as. You must be an
        /// HPC Pack administrator or HPC Pack Job administrator to make it
        /// work.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> GetJobTemplatesWithHttpMessagesAsync(string xMsAsUser = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
